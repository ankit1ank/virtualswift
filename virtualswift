#!/bin/bash

write_activate() {
        ###### Create activate script and make it executable
        echo '
        deactivate () {
                # reset old environment variables
                # ! [ -z ${VAR+_} ] returns true if VAR is declared at all
                if ! [ -z "${_OLD_VIRTUAL_PATH+_}" ] ; then
                        PATH="$_OLD_VIRTUAL_PATH"
                        export PATH
                        unset _OLD_VIRTUAL_PATH
                fi

                # This should detect bash and zsh, which have a hash command that must
                # be called to get it to forget past commands.  Without forgetting
                # past commands the $PATH changes we made may not be respected
                if [ -n "${BASH-}" ] || [ -n "${ZSH_VERSION-}" ] ; then
                        hash -r 2>/dev/null
                fi

                if ! [ -z "${_OLD_VIRTUAL_PS1+_}" ] ; then
                        PS1="$_OLD_VIRTUAL_PS1"
                        export PS1
                        unset _OLD_VIRTUAL_PS1
                fi

                unset VIRTUAL_ENV
                if [ ! "${1-}" = "nondestructive" ] ; then
                        # Self destruct!
                        unset -f deactivate
                fi
        }

        deactivate nondestructive

        VIRTUAL_ENV="__VIRTUAL_ENV__"
        export VIRTUAL_ENV

        _OLD_VIRTUAL_PATH="$PATH"
        DIR=`pwd`
        PATH="$DIR"/swift/usr/bin:"${PATH}"
        export PATH

        _OLD_VIRTUAL_PS1="$PS1"
        PS1="(virtual) $_OLD_VIRTUAL_PS1"
        export PS1

        # This should detect bash and zsh, which have a hash command that must
        # be called to get it to forget past commands.  Without forgetting
        # past commands the $PATH changes we made may not be respected
        if [ -n "${BASH-}" ] || [ -n "${ZSH_VERSION-}" ] ; then
                hash -r 2>/dev/null
        fi' > activate
        chmod +x activate
        echo "Run 'source ./activate' to activate the virtual environment."
}


# If correct number of command line arguments
if [ "$#" -ne 1 ] && [ "$#" -ne 2 ] ; then
  echo "Usage: virtualswift env_name" >&2
  exit 1
fi

# Save swift version if number of arguments is two
SPECIFIED_RELEASE=4.0.2
if [ "$#" -eq 2 ] ; then
        if [ "$2" == 4.0.2 ] ; then
                SPECIFIED_RELEASE="4.0.2"
        elif [ "$2" == 4.0 ] ; then
                SPECIFIED_RELEASE="4.0"
        elif [ "$2" == 3.1.1 ] ; then
                SPECIFIED_RELEASE="3.1.1"
        elif [ "$2" == 3.1 ] ; then
                SPECIFIED_RELEASE="3.1"
        else 
                echo "Invalid release specified." >&2
                echo "Supported swift releases: 4.0.2, 4.0, 3.1.1, 3.1" >&2
                exit 1
        fi
fi

# Create folder with virtualenv name
mkdir $1
cd $1
echo "Downloading swift .... "

# Check OS and specify DOWNLOAD URL accordingly
if [[ "$OSTYPE" == "linux-gnu" ]]; then
        # Only Ubuntu 16.10, 16.04, 14.04 supported.
        if [[ `lsb_release -rs` == "16.10" ]]; then
                DOWNLOAD_URL="https://swift.org/builds/swift-${SPECIFIED_RELEASE}-release/ubuntu1610/swift-${SPECIFIED_RELEASE}-RELEASE/swift-${SPECIFIED_RELEASE}-RELEASE-ubuntu16.10.tar.gz"
        elif [[ `lsb_release -rs` == "16.04" ]]; then
                DOWNLOAD_URL="https://swift.org/builds/swift-${SPECIFIED_RELEASE}-release/ubuntu1604/swift-${SPECIFIED_RELEASE}-RELEASE/swift-${SPECIFIED_RELEASE}-RELEASE-ubuntu16.04.tar.gz"
        elif [[ `lsb_release -rs` == "14.04" ]]; then
                DOWNLOAD_URL="https://swift.org/builds/swift-${SPECIFIED_RELEASE}-release/ubuntu1404/swift-${SPECIFIED_RELEASE}-RELEASE/swift-${SPECIFIED_RELEASE}-RELEASE-ubuntu14.04.tar.gz"
        else
                echo "OS Not Supported"
        fi

        # Ubuntu specific download and setup
        curl -o swift.tar.gz $DOWNLOAD_URL
        echo "Installing swift ... "

        mkdir swift
        tar -xvf swift.tar.gz -C swift --strip-components=1  &> /dev/null
        rm swift.tar.gz
        
        # Create activate script
        write_activate

elif [[ "$OSTYPE" == "darwin"* ]]; then
        case `sw_vers -productVersion` in
	 	10.1*)
                        DOWNLOAD_URL="https://swift.org/builds/swift-${SPECIFIED_RELEASE}-release/xcode/swift-${SPECIFIED_RELEASE}-RELEASE/swift-${SPECIFIED_RELEASE}-RELEASE-osx.pkg"
                        ;;
 		*)
                        echo "OS Not Supported"
                        ;;
	esac
        
        # MacOS Specific Installation
        curl -o swift.pkg $DOWNLOAD_URL
        echo "Installing swift ... "

        mkdir swift
        xar -xf swift.pkg &> /dev/null
        mv `(find swift-* -print &) | head -n 1` temp.pkg
        rm Distribution
        cd temp.pkg
        cp Payload ../swift/Payload
        cd ../swift/
        tar xvf Payload &> /dev/null
        rm Payload
        cd ..
        rm -rf temp.pkg
        rm swift.pkg

        # Create activate script
        write_activate

else
	echo "OS Not supported"
fi